# Chunk 1: setup
library(plotly)
install(mtcars)
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
# Chunk 1
library(plotly)
library(mtcars)
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
# Chunk 1
library(plotly)
library(mtcars)
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
mtcars
# Chunk 1
library(plotly)
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
# Chunk 1
library(plotly)
mtcars
#plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
# Chunk 1
install.packages("plotly")
library(plotly)
mtcars
#plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
install.packages("plotly")
# Chunk 1
library(plotly)
plot_ly(mtcars, y = mpg, mode = "markers")
```{r}
# Chunk 1
install.packages("plotly")
library(plotly)
# Chunk 2
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
```{r, eval=FALSE}
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
```
install.packages("plotly")
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
library(plotly)
library(tidyr)
library(dplyr)
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = ~terrain1, type = "heatmap")
library(plotly)
library(tidyr)
library(dplyr)
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
library(plotly)
library(tidyr)
library(dplyr)
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
library(plotly)
library(tidyr)
library(dplyr)
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
```{r}
library(plotly)
library(tidyr)
library(dplyr)
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
```
library(plotly)
library(tidyr)
library(dplyr)
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
library(plotly)
library(tidyr)
library(dplyr)
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
library(plotly)
library(tidyr)
library(dplyr)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000),]
P <- ggplot(data =d, aes(x = carat, y = price)) +
geom_plot(aes(text = paste("Clarity")))
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library(plotly)
library(tidyr)
library(dplyr)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000),]
p <- ggplot(data =d, aes(x = carat, y = price)) +
geom_plot(aes(text = paste("Clarity")))
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library(plotly)
library(tidyr)
library(dplyr)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000),]
p <- ggplot(data =d, aes(x = carat, y = price)) +
geom_plot(aes(text = paste("Clarity")))
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library(plotly)
library(tidyr)
library(dplyr)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000),]
p <- ggplot(data =d, aes(x = carat, y = price)) +
geom_plot(aes(text = paste("Clarity")))
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library(plotly)
library(tidyr)
library(dplyr)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000),]
p <- ggplot(data =d, aes(x = carat, y = price)) +
geom_plot(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
d <- diamonds[sample(nrow(diamonds), 1000),]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_plot(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000),]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_plot(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
gg <- ggplotly(p)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000),]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_plot(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
gg <- ggplotly(p)
nhtemp
head(nhtemp)
airquality
library(plotly)
library(tidyr)
library(dplyr)
data("airquality")
plot_ly(airquality, x = ~hp, y = ~wt, mode = "markers")
```
mtcars
library(plotly)
library(tidyr)
library(dplyr)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000),]
p <- ggplot(data =d, aes(x = carat, y = price)) +
geom_plot(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
mtcars
airquality
head(airquality)
```{r, eval=FALSE}
install.packages("plotly")
library(plotly)
library(tidyr)
library(dplyr)
data("airquality")
plot_ly(airquality, x = ~Month, y = ~Temp, mode = "markers")
```
install.packages("plotly")
airquality
```{r, eval=FALSE}
install.packages("plotly")
library(plotly)
library(tidyr)
library(dplyr)
data("airquality")
plot_ly(airquality, x = ~Month, y = ~Ozone, mode = "markers")
```
data("airquality")
plot_ly(airquality, x = ~Month, y = ~Ozone, mode = "markers")
```
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, mode = "markers")
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, mode = "markers")
install.packages("plotly")
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, , type = scatter, mode = "markers")
install.packages("plotly")
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, , type = scatter, mode = "markers")
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, , type = "scatter", mode = "markers")
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, , type = "scatter", mode = "markers")
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, , type = "scatter", mode = "markers")
airquality
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, , type = "scatter", mode = "markers", color = ~Wind)
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, , type = "scatter", mode = "markers", color = ~Wind)
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, , type = "scatter", mode = "markers", color = disp)
```{r}
data("mtcars")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~disp)
```
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, type = "scatter", mode = "markers", color = ~disp)
```
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, type = "scatter", mode = "markers", color = ~disp)
```
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, type = "scatter", mode = "markers", color = ~disp)
```
mtcars
airquality
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, type = "scatter", mode = "markers", color = ~Wind)
airquality
plot_ly(airquality, x = ~Temp, y = ~Ozone, type = "scatter", mode = "markers", color = ~Wind) %>%
layout(title = 'Temperature and Ozone Levels in New York Air Quality Measurements')
library(plotly)
data("airquality")
plot_ly(airquality, x = ~Temp, y = ~Ozone, type = "scatter", mode = "markers", color = ~Wind) %>%
layout(title = 'Temperature and Ozone Levels in New York Air Quality Measurements')
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp('Documents/Coursera/testing')
runApp('Documents/Coursera/testing')
runApp('Documents/Coursera/testing')
runApp('Documents/Coursera/testing')
runApp('Documents/Coursera/testing')
runApp('Documents/Coursera/testing')
runApp('Documents/Coursera/testing')
setwd("~/Documents/Coursera/testing")
runApp()
runApp('~/Documents/Coursera/testing2')
runApp('~/Documents/Coursera/testing2')
runApp('~/Documents/Coursera/testing2')
runApp('~/Documents/Coursera/testing2')
runApp('~/Documents/Coursera/testing2')
runApp('~/Documents/Coursera/testing2')
install.packages("mtcars")
library(mtcars)
install.packages("Usingr")
install.packages("UsingR")
library(UsingR)
runApp('~/Documents/Coursera/testing2')
runApp('~/Documents/Coursera/testing2')
runApp('~/Documents/Coursera/testing2')
runApp('~/Documents/Coursera/CourseProject')
airquality
mtcars
mtcars
runApp('~/Documents/Coursera/mtcars')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='pvenuto',
token='A60415F1F70A3141820D8C195ADC921B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='pvenuto', token='A60415F1F70A3141820D8C195ADC921B', secret='<SECRET>')
rsconnect::setAccountInfo(name='pvenuto', token='A60415F1F70A3141820D8C195ADC921B', secret='<SECRET>')
library(rsconnect)
library(UsingR)
data(diamond)
diamond
head(diamond)
library(mtcars)
mtcars
shiny::runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
mtcars
load(mtcars)
data(mtcars)
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
install.packages(UsingR)
install.packages("UsingR")
install.packages("UsingR")
data(diamond)
data(mtcars0)
data(mtcars)
mtcars
diamond
mtcars
head(mtcars)
summary(mtcars)
data(swiss)
swiss
summary(swiss)
shiny::runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
swiss
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
swiss
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
swiss
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
runApp('~/Documents/Coursera/mtcars')
setwd("~/Documents/Coursera/DDP_Final_Course_Project")
runApp()
install.packages('devtools")')
install.packages('devtools")
shinyUI(fluidPage(
titlePanel("Predict Fertility from Agriculture, Examination, and Education"),
h4("Outcome is a standard measure of fertility from a 0 to 100 scale"),
sidebarLayout(
sidebarPanel(
sliderInput("sliderAgri", "Select agriculture value", 0, 100, value = 50),
sliderInput("sliderExam", "Select examination value", 0, 100, value = 50),
sliderInput("sliderEducation", "Select education value", 0, 100, value = 50),
submitButton("Submit")
),
mainPanel(
h3("Predicted Fertility from Model 1:"),
h5("Modeling on Agriculture"),
textOutput("pred1"),
h3("Predicted Fertility from Model 2:"),
h5("Modeling on Agriculture and Examination"),
textOutput("pred2"),
h3("Predicted Fertility from Model 3:"),
h5("Modeling on Agriculture, Examination, and Education"),
textOutput("pred3")
)
)
))
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github("slidifyLibraries", "ramnathv")
install_github("ramnathv/slidifyLibraries")
setwd("~/Documents/Coursera/DDP_Final_Course_Project")
author("First_deck")
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidifyLibraries")
author("first_deck")
library(slidify)
author("first_deck")
slidify("index.Rmd")
library(knitr)
browseURL("index.html")
slidify("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(user = "pjv2", repo = "DDP-final-project")
publish_github("pjv2", "DDP-final-project")
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
